import pandas as pd
import plotly.graph_objects as go
from collections import defaultdict
from data_loader import DataLoader


class LabelInterestAnalysis:
    """
    Analyzes the interest generated by labels on issues across multiple years,
    visualized as an interactive stacked bar graph.
    """

    def run(self):
        """
        Starting point for this analysis.
        """
        issues = DataLoader().get_issues()

        if not issues:
            print("No issues available for analysis.")
            return
        label_counts_by_year = defaultdict(lambda: defaultdict(int))
        total_events_by_year = defaultdict(int)
        for issue in issues:
            for event in issue.events:
                if not event.event_date:
                    continue
                try:
                    event_year = pd.to_datetime(event.event_date).year
                except Exception:
                    continue

                for label in issue.labels:
                    label_counts_by_year[event_year][label] += 1
                    total_events_by_year[event_year] += 1
        all_data = []
        others_data = defaultdict(lambda: defaultdict(int))
        for year, label_counts in label_counts_by_year.items():
            total_events = total_events_by_year[year]
            if total_events == 0:
                continue

            label_percentages = {
                label: (count / total_events) * 100 for label, count in label_counts.items()
            }

            threshold = 3
            significant_labels = {
                label: percentage
                for label, percentage in label_percentages.items()
                if percentage >= threshold
            }
            for label, percentage in label_percentages.items():
                if percentage < threshold:
                    others_data[year][label] += label_counts[label]

            others_percentage = sum(
                percentage
                for label, percentage in label_percentages.items()
                if percentage < threshold
            )
            if others_percentage > 0:
                significant_labels["Others"] = others_percentage

            for label, percentage in significant_labels.items():
                all_data.append({"Year": year, "Label": label, "Percentage": percentage})

        if not all_data:
            print("No data to plot.")
            return

        df = pd.DataFrame(all_data)
        self._plot_interactive_bar_chart(df)

    def _plot_interactive_bar_chart(self, df: pd.DataFrame):
        """
        Plots an interactive stacked bar chart with Plotly.
        """
        fig = go.Figure()
        for label in df["Label"].unique():
            label_data = df[df["Label"] == label]
            fig.add_trace(
                go.Bar(
                    x=label_data["Year"],
                    y=label_data["Percentage"],
                    name=label,
                    text=label_data["Percentage"].apply(lambda x: f"{x:.1f}%"),
                    hoverinfo="text+name",
                )
            )
        fig.update_layout(
            title="Interactive Label Interest Distribution Across Years",
            xaxis_title="Year",
            yaxis_title="Percentage of Events",
            barmode="stack",
            legend_title="Labels",
            hovermode="closest",
        )

        fig.write_html("interactive_bar_chart.html", auto_open=True)
        fig.show()


if __name__ == "__main__":
    LabelInterestAnalysis().run()
